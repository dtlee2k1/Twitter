openapi: 3.0.3
info:
  title: Swagger Twitter-Clone
  contact:
    email: leducthai2001@gmail.com
  version: 1.0.0
servers:
  - url: https://twitter-clone-api-m1zv.onrender.com
  - url: http://localhost:4000

tags:
  - name: users
    description: Operations about users
  - name: medias
    description: Operations about medias
  - name: tweets
    description: Operations about tweets
  - name: bookmarks
    description: Operations about bookmarks
  - name: likes
    description: Operations about likes
  - name: search
    description: Operations about search
  - name: conversations
    description: Operations about conversations
paths:
  /users/register:
    post:
      tags:
        - users
      summary: Register a new user
      description: User will receive an email to verify after registering
      operationId: register
      requestBody:
        description: Register information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
        required: true
      responses:
        '200':
          description: Register success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Register success
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'

        '422':
          description: Invalid input
  /users/login:
    post:
      tags:
        - users
      summary: Login a user
      description: Login to system by email and password
      operationId: login
      requestBody:
        description: Login information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login success
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'

        '422':
          description: Invalid input
  /users/logout:
    post:
      tags:
        - users
      summary: Logout account
      description: Logout account from the system
      operationId: logout
      security:
        - BearedAuth: []
      requestBody:
        description: Logout information
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU4ZTI1Y2JhNzZkYTQ5MzU4MTU5Njc3IiwidHlwZSI6InJlZnJlc2hfdG9rZW4iLCJ2ZXJpZnkiOjEsImlhdCI6MTcwMzgyMDY5NywiZXhwIjoxNzM1MzU2Njk3fQ.5zfWsqtjwhkDCivkhElOeBjBw4u3mHunCamzvrftP9k
        required: true
      responses:
        '200':
          description: Logout success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout success
        '401':
          description: Unauthorized
  /users/refresh-token:
    post:
      tags:
        - users
      summary: Refresh token
      description: Refresh access token for user when it expires
      operationId: refreshToken
      security:
        - BearedAuth: []
      requestBody:
        description: Refresh token information
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU4ZTI1Y2JhNzZkYTQ5MzU4MTU5Njc3IiwidHlwZSI6InJlZnJlc2hfdG9rZW4iLCJ2ZXJpZnkiOjEsImlhdCI6MTcwMzgyMDY5NywiZXhwIjoxNzM1MzU2Njk3fQ.5zfWsqtjwhkDCivkhElOeBjBw4u3mHunCamzvrftP9k
        required: true
      responses:
        '200':
          description: Refresh token success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Refresh token successfully
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '401':
          description: Unauthorized
        '404':
          description: NotFound
  /users/verify-email:
    post:
      tags:
        - users
      summary: Verify email
      description: User will receive an email confirmation to verify after registering
      operationId: verifyEmail
      requestBody:
        description: Verify email information
        content:
          application/json:
            schema:
              type: object
              properties:
                email_verify_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU4ZTI1Y2JhNzZkYTQ5MzU4MTU5Njc3IiwidHlwZSI6InJlZnJlc2hfdG9rZW4iLCJ2ZXJpZnkiOjEsImlhdCI6MTcwMzgyMDY5NywiZXhwIjoxNzM1MzU2Njk3fQ.5zfWsqtjwhkDCivkhElOeBjBw4u3mHunCamzvrftP9k
        required: true
      responses:
        '200':
          description: Email verify success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verify success
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '401':
          description: Unauthorized
        '404':
          description: NotFound
  /users/resend-verify-email:
    post:
      tags:
        - users
      summary: Resend verify email
      description: User will again receive an email confirmation to verify
      operationId: resendVerifyEmail
      security:
        - BearedAuth: []
      responses:
        '200':
          description: Resend verification email success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Resend verification email success
        '404':
          description: NotFound
  /users/forgot-password:
    post:
      tags:
        - users
      summary: Forgot password
      description: User will receive a link in user's email to reset password
      operationId: forgotPassword
      requestBody:
        description: Forgot password information
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: twittertest2k1@gmail.com
        required: true
      responses:
        '200':
          description: Check email to reset password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Check email to reset password
        '422':
          description: UnprocessableEntity
        '404':
          description: NotFound
  /users/verify-forgot-password:
    post:
      tags:
        - users
      summary: Verify forgot password
      description: Verify user via the link that user receive in email
      operationId: verifyForgotPassword
      requestBody:
        description: Verify forgot password information
        content:
          application/json:
            schema:
              type: object
              properties:
                forgot_password_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU4ZTI1Y2JhNzZkYTQ5MzU4MTU5Njc3IiwidHlwZSI6InJlZnJlc2hfdG9rZW4iLCJ2ZXJpZnkiOjEsImlhdCI6MTcwMzgyMDY5NywiZXhwIjoxNzM1MzU2Njk3fQ.5zfWsqtjwhkDCivkhElOeBjBw4u3mHunCamzvrftP9k
        required: true
      responses:
        '200':
          description: Verify forgot password success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verify forgot password successfully
        '401':
          description: Unauthorized
  /users/reset-password:
    post:
      tags:
        - users
      summary: Reset password
      description: Set new password on the client side via the forgot password link in email
      operationId: resetPassword
      requestBody:
        description: Reset password information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordBody'
        required: true
      responses:
        '200':
          description: Reset password success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reset password successfully
        '422':
          description: UnprocessableEntity
  /users/change-password:
    put:
      tags:
        - users
      summary: Change password
      description: Change password of user's account
      operationId: changePassword
      security:
        - BearedAuth: []
      requestBody:
        description: Change password information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changePasswordBody'
        required: true
      responses:
        '200':
          description: Change password success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Change password successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /users/me:
    get:
      tags:
        - users
      summary: Get my profile
      description: Get my profile by access_token in Headers
      operationId: getMe
      security:
        - BearedAuth: []
      responses:
        '200':
          description: Get my profile success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get my profile successfully
                  result:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access token is required
    patch:
      tags:
        - users
      summary: Update my profile
      description: Update profile of an user's account
      operationId: updateMe
      requestBody:
        description: Update my profile information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMeBody'
        required: false
      security:
        - BearedAuth: []
      responses:
        '200':
          description: Update my profile success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Update my profile successfully
                  result:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access token is required
components:
  schemas:
    RegisterBody:
      type: object
      properties:
        name:
          type: string
          example: Test Lee
        email:
          type: string
          example: twittertest2k1@gmail.com
        password:
          type: string
          example: Test123!
        confirm_password:
          type: string
          example: Test123!
        date_of_birth:
          type: string
          format: ISO8601
          example: 2001-09-10T00:00:00.000Z
    LoginBody:
      type: object
      properties:
        email:
          type: string
          example: test@gmail.com
        password:
          type: string
          example: Test123!
    ResetPasswordBody:
      type: object
      properties:
        forgot_password_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU4ZTI1Y2JhNzZkYTQ5MzU4MTU5Njc3IiwidHlwZSI6InJlZnJlc2hfdG9rZW4iLCJ2ZXJpZnkiOjEsImlhdCI6MTcwMzgyMDY5NywiZXhwIjoxNzM1MzU2Njk3fQ.5zfWsqtjwhkDCivkhElOeBjBw4u3mHunCamzvrftP9k
        password:
          type: string
          example: NewPassword123!
        confirm_password:
          type: string
          example: NewPassword123!
    changePasswordBody:
      type: object
      properties:
        old_password:
          type: string
          example: Test123!
        password:
          type: string
          example: NewPassword123!
        confirm_password:
          type: string
          example: NewPassword123!
    UpdateMeBody:
      type: object
      properties:
        name:
          type: string
          example: Duke Tyler
        date_of_birth:
          type: string
          format: ISO8601
          example: 2001-09-10T00:00:00.000Z
        bio:
          type: string
          example: 'This is my bio'
        location:
          type: string
          example: 'Hanoi, Vietnam'
        website:
          type: string
          example: 'www.example.com'
        username:
          type: string
          example: 'user_657f3a88fea3eb2eb6f86fad'
        avatar:
          type: string
          example: 'http:localhost:4000/images/avatars/duketyler.jpg'
        cover_photo:
          type: string
          example: 'http:localhost:4000/images/avatars/duketyler.jpg'
    SuccessAuthentication:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU4ZTI1Y2JhNzZkYTQ5MzU4MTU5Njc3IiwidHlwZSI6ImFjY2Vzc190b2tlbiIsInZlcmlmeSI6MSwiaWF0IjoxNzAzODIwNjk3LCJleHAiOjE3MDM5MDcwOTd9.Eoru1vPtRqYi41TB8R4L0ABI_pUyZCvydPKA3FdCd0U
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU4ZTI1Y2JhNzZkYTQ5MzU4MTU5Njc3IiwidHlwZSI6InJlZnJlc2hfdG9rZW4iLCJ2ZXJpZnkiOjEsImlhdCI6MTcwMzgyMDY5NywiZXhwIjoxNzM1MzU2Njk3fQ.5zfWsqtjwhkDCivkhElOeBjBw4u3mHunCamzvrftP9k
    User:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 657f3a88fea3eb2eb6f86fad
        name:
          type: string
          example: Duke Tyler
        email:
          type: string
          example: duketyler@gmail.com
        date_of_birth:
          type: string
          format: ISO8601
          example: 2001-09-10T00:00:00.000Z
        created_at:
          type: string
          format: ISO8601
          example: 2023-12-17T18:14:32.906Z
        updated_at:
          type: string
          format: ISO8601
          example: 2023-12-17T18:14:32.906Z
        verify:
          $ref: '#/components/schemas/UserVerifyStatus'
        twitter_circle:
          type: array
          items:
            type: string
            format: MongoId
            example: ['65748b6e84c9680c9a7f41c6', '6570698bc6a6e9d4b146e7ed']
        bio:
          type: string
          example: 'This is my bio'
        location:
          type: string
          example: 'Hanoi, Vietnam'
        website:
          type: string
          example: 'www.example.com'
        username:
          type: string
          example: 'user_657f3a88fea3eb2eb6f86fad'
        avatar:
          type: string
          example: 'http:localhost:4000/images/avatars/duketyler.jpg'
        cover_photo:
          type: string
          example: 'http:localhost:4000/images/avatars/duketyler.jpg'
    UserVerifyStatus:
      type: number
      enum: [Unverified, Verified, Banned]
      example: 1
  securitySchemes:
    BearedAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
